from azure.devops.connection import Connection
from msrest.authentication import BasicAuthentication

# Fill in with your personal access token and org URL
personal_access_token = 'cadivdfc3n2toqckmvvlsgn4wcq4yplnlzg7xspxxklmktg42auq'
organization_url = 'https://dev.azure.com/eichwald'

# Create a connection to the org
credentials = BasicAuthentication('', personal_access_token)
connection = Connection(base_url=organization_url, creds=credentials)

# Get a client (the "core" client provides access to projects, teams, etc)
def get_project_names():
    core_client = connection.clients.get_core_client()
    get_projects_response = core_client.get_projects()
    return (project.name for project in get_projects_response.value)

# Get the test plans for all projects
def get_plans():
    test_client = connection.clients.get_test_client()    
    for project in get_project_names():
        try:
            for plan in test_client.get_plans(project):
                print("Test Plan {}: {} ({})".format(plan.id, plan.name, plan.area.name))
        except Exception as e:
            print("Project '{}' raised error: {}".format(project, e))

def get_test_suites_for_plan():
    test_client = connection.clients.get_test_client()
    for project in get_project_names():
        try:
            for plan in test_client.get_plans(project):
                for suite in test_client.get_test_suites_for_plan(project, plan.id):
                    print(
                        "Test Suite {}: {} ({}.{})".format(
                            suite.id, suite.name, plan.id, plan.name
                        )
                    )
        except Exception as e:
            print("Project '{}' raised error: {}".format(project, e))

def get_test_runs():
    test_client = connection.clients.get_test_client()
    for project in get_project_names():
        try:
            for run in test_client.get_test_runs(project, top=16):
                print(
                    "Test Run {}: {} => {} ({})".format(
                        run.id, run.name, run.state, project
                    )
                )
        except Exception as e:
            print("Project '{}' raised error: {}".format(project, e))

#get_test_suites_for_plan()
#get_test_runs()
get_plans()